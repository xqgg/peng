@page
<html>
<head>
</head>
<body>
    <script>
        //1.在封装作业的基础上，为Course添加两个子类：主修课（MajorCourse）和辅修课（ElectiveCourse）
        //2.声明一个Stundent类，包含name和score两个属性，让Course的Students包含的是Student的对象
        //3.主修课需要参加考试，所以有一个Exam(student)方法；辅修课只需要测评，所以有一个方法Assess(student)
        //4.创建一个MajorCourse的实例，运行它的Exam(student)方法，结束课程（使用end()方法），并给该student该course上的score赋值为50 - 100的随机整数
        //5.创建一个ElectiveCourse的实例，运行它的Exam(student)方法，结束课程（使用end()方法），给该student该course上的score赋值为ABCDE中的一个随机值
        //6.给Course声明一个静态的GetStudentsByName(name) ，能根据不同的name返回不同的整数值（参加该course的学生数量）
        //7.在子类调用GetStudentsByName(name)
        //8.说明：为什么子类可以继承父类的实例和静态方法？
        function getTime(time) {
            var date = time;
            var seperator = "-";
            var year = date.getFullYear();
            var month = date.getMonth() + 1;
            var day = date.getDate();
            if (month >= 1 && month <= 9) {
                month = "0" + month;
            }
            if (day >= 0 && day <= 9) {
                day = "0" + day;
            }
            var resultTime = year + seperator + month + seperator + day;
            return resultTime;
        }

        class Course {
            constructor(name, startDate, endDate, students) {
                
                this.name = name;
                this.startDate = startDate;
                this.endDate = endDate;
                this.students = Student;
                this.end = function () {
                    console.log(this.name + "于" + getTime(this.startDate) + "开课，于" + getTime(this.endDate) + "结束。")
                    //自有方法
                }
            }
            begin() {
                console.log(this.name + "于" + getTime(this.startDate) + "开课，共有" + this.students.length + "名同学" + `"` + this.students + `"` + "同学报名。")
            }
            set EndDate(value) {
                if (value < this.startDate) {
                    throw new Error("结束时间不能小于开始时间！");
                }
                if ((value - this.startDate) / 1000 / 60 / 60 / 24 > 365) {
                    throw new Error("结束时间于开始时间不能超过一年！");
                }
                this.endDate = value;
            }
        }
        class Student extends Course {
                    constructor(name, score) {
                        super(name);
                        this.score = score;
                    }
                }
        class MajorCourse extends Course {
        }
        class ElectiveCourse extends Course {
        }
        let JavaScript = new Course("JavaScript", new Date(2019, 7, 18), new Date(2019, 9, 18), ["彭志强", "陈元", "于维谦", "王新", "曾俊清", "陈晓斌", "杨进文"]);
        let SQL = new Course("SQL", new Date(2019, 11, 18), new Date(2019, 12, 18), ["彭志强", "陈元", "于维谦", "王新", "曾俊清", "陈晓斌", "杨进文"]);
        Course.prototype.begin = function () {
            console.log("不修改class，动态的改变begin()方法，使其能影响所有Course对象");
        }


    </script>
</body>
</html>